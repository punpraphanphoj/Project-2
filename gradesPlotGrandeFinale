# Function shows two plots: first one is a bar plot that shows how many occurences of each final grades was there
    Second plot shows the data points presenting grades for each of the assignments together with average value for assignment.
    The data points are scattered for transarency.

import matplotlib.pyplot as plt
import numpy as np

def gradesPlot(grades):
    #from computeFinalGrades import computeFinalGrades
    #Data input
     
    #Plot. 1 Barplot
    from computeFinalGrades import computeFinalGrades 
    Fgrades = computeFinalGrades(grades)
    
    #Data is converted into array in range between 1 and 7 to enable even speces between data labels on x-axis.
    
    for i in range(np.size(Fgrades)):
        if Fgrades[i]==-3:
            Fgrades[i]=1
        elif Fgrades[i]==0:
            Fgrades[i]=2
        elif Fgrades[i]==2:
            Fgrades[i]=3
        elif Fgrades[i]==4:
            Fgrades[i]=4
        elif Fgrades[i]==7:
            Fgrades[i]=5
        elif Fgrades[i]==10:
            Fgrades[i]=6
        elif Fgrades[i]==12:
            Fgrades[i]=7
    
    
    fig = plt.figure(1)
    # Histogram is used to calculated the number of occurences of each final grade
    his=np.histogram(Fgrades, bins=(7),range=(1,8))
    plt.bar(his[1][1:],his[0],width=0.8, align="center")
    ax=fig.gca()
    ax.set_xticks(his[1][1:])
    ax.set_xticklabels(['-3','0','2','4','7','10','12'])
    plt.title("Final Grades")
    plt.xlabel("7-step-scale")
    plt.ylabel("Occurency")
    plt.grid()
    plt.show()
    
     #Pt. 2 Grade per assignment plot
  
    
    average=[]
    name=grades[:,1]
    grades=np.delete(grades,0,1)
    grades=np.delete(grades,0,1)
    grades = grades.astype(np.float)
    rawgrades=grades
    # Here very small random number is added to scatter the data points around given point to provide transparency of results
    i = j = 0
    for i in range(grades.shape[0]):
        for j in range(grades.shape[1]):
            grades[i,j] += np.random.uniform(-0.1,0.1)
    # With increasing number of assignments, the number of data points plotted is increasing
    #a=[]
    #for i in range(grades.shape[0]):
        #for j in range(grades.shape[1]):      
            #a+=plt.plot(grades[i,j],j,'b*')
            
            
            #xaxis[i] + np.random.uniform(-0.1,0.1), grades[j,i+2] + np.random.uniform(-0.1,0.1)
    
    scaleindex = np.array([-3, 0, 2, 4, 7, 10, 12])
    scaleindex1 = np.arange(1,grades.shape[0])
    
    ax = plt.subplot(111)
    ax.set_yticks(scaleindex)
    ax.set_xticks(scaleindex1)
    ax.set_yticklabels(['-3', '0', '2', '4', '7', '10', '12'])
    # X-axis is generic and its length is dependent on number of assignments
    ax.set_xticklabels(np.arange(1, grades.shape[0]+1))
    plt.title("Grades pr. Assignment")
    plt.xlabel("Number of assignment")
    plt.ylabel("Grade")        
    plt.xlim([0.75,grades.shape[1]+0.25])
    plt.ylim([-4,13])
    plt.grid()

    
    for i in range(grades.shape[0]):    
        a=np.arange(1,grades.shape[1]+1,dtype=float)
        a+=np.random.uniform(-0.1,0.1)
        plt.plot(a,grades.T[:,i],marker='o',markersize=5,linestyle='None',c=np.random.rand(3,1),label=name[i] )
    for b in range(grades.shape[1]):
        average=np.append(average,sum(rawgrades.T[b,:])/rawgrades.shape[0])
    print(rawgrades.shape[0])
    plt.plot(np.arange(1, grades.shape[1]+1),average,"-ro", label='Average Grade')
    #Legend has been moved out of the plot area to provide transparency of results
    ax.legend(loc='center left', bbox_to_anchor=(1,0.5),numpoints=1)
         
    plt.show()
    
