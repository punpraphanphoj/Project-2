# -*- coding: utf-8 -*-
"""
Spyder Editor

B4 Grades plot function. Creates a bar plot of the number of students who 
recieved the final grade and a plot of the total grades for each assignment.

"""
import matplotlib.pyplot as plt
import numpy as np
# following for counting occurences. Idea found from http://stackoverflow.com
#/questions/2600191/how-can-i-count-the-occurrences-of-a-list-item-in-python
#from collections import Counter


def gradesPlot(grades):
    #from computeFinalGrades import computeFinalGrades
    #Data input
    
     
    #Pt. 1 Barplot
    from computeFinalGrades import computeFinalGrades 
    Fgrades = computeFinalGrades(grades)
    
    for i in range(np.size(Fgrades)):
        if Fgrades[i]==-3:
            Fgrades[i]=1
        elif Fgrades[i]==0:
            Fgrades[i]=2
        elif Fgrades[i]==2:
            Fgrades[i]=3
        elif Fgrades[i]==4:
            Fgrades[i]=4
        elif Fgrades[i]==7:
            Fgrades[i]=5
        elif Fgrades[i]==10:
            Fgrades[i]=6
        elif Fgrades[i]==12:
            Fgrades[i]=7
    
    fig = plt.figure(1)
    his=np.histogram(Fgrades, bins=(7),range=(1,8))
    plt.bar(his[1][1:],his[0],width=0.8, align="center")
    ax=fig.gca()
    ax.set_xticks(his[1][1:])
    ax.set_xticklabels(['-3','0','2','4','7','10','12'])
    plt.title("Final Grades")
    plt.xlabel("7-step-scale")
    plt.ylabel("Occurency")
    plt.grid()
    plt.show()
    
     #Pt. 2 Grade pr. assignment plot
    #selcted matrix from row 0 to N students and coloumn 3 to M xaxis
    
    average=[]
    name=grades[:,1]
    grades=np.delete(grades,0,1)
    grades=np.delete(grades,0,1)
    grades = grades.astype(np.float)
    rawgrades=grades
    
    i = j = 0
    for i in range(grades.shape[0]):
        for j in range(grades.shape[1]):
            grades[i,j] += np.random.uniform(-0.1,0.1)
  
    #a=[]
    #for i in range(grades.shape[0]):
        #for j in range(grades.shape[1]):      
            #a+=plt.plot(grades[i,j],j,'b*')
            
            
            #xaxis[i] + np.random.uniform(-0.1,0.1), grades[j,i+2] + np.random.uniform(-0.1,0.1)
    
    scaleindex = np.array([-3, 0, 2, 4, 7, 10, 12])
    scaleindex1 = np.arange(1,grades.shape[0])
    
    ax = plt.subplot(111)
    ax.set_yticks(scaleindex)
    ax.set_xticks(scaleindex1)
    ax.set_yticklabels(['-3', '0', '2', '4', '7', '10', '12'])
    ax.set_xticklabels(np.arange(1, grades.shape[0]+1))
    plt.title("Grades pr. Assignment")
    plt.xlabel("Number of assignment")
    plt.ylabel("Grade")        
    plt.xlim([0.75,grades.shape[1]+0.25])
    plt.ylim([-4,13])
    plt.grid()

    
    for i in range(grades.shape[0]):    
        a=np.arange(1,grades.shape[1]+1,dtype=float)
        a+=np.random.uniform(-0.1,0.1)
        plt.plot(a,grades.T[:,i],marker='o',markersize=5,linestyle='None',c=np.random.rand(3,1),label=name[i] )
    for b in range(grades.shape[1]):
        average=np.append(average,sum(rawgrades.T[b,:])/rawgrades.shape[0])
    print(rawgrades.shape[0])
    plt.plot(np.arange(1, grades.shape[1]+1),average,"-ro", label='Average Grade')
    ax.legend(loc='center left', bbox_to_anchor=(1,0.5),numpoints=1)
         
    plt.show()
    
''' 
print(gradesPlot(np.array([['s123456', 'Michael Andersen', 7, 7, 4,10], 
                              ['s213789', 'Bettina Petersen', 12, 10, 10,4], 
                               ['s123468', 'Thomas Nielsen', -3, 7, 2,0], 
                              ['s123579', 'Marie Hansen', 10, 12, 12,-3],
                              ['s141511', 'Adam Marczynski', 0, 0, 2,-3]])))'''
